version: '3.8'

services:
  backend:
    build: .
    container_name: teamtime-backend
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - SESSION_SECRET=${SESSION_SECRET}
      - TOKEN_EXPIRE_TIME=${TOKEN_EXPIRE_TIME:-3600}
      - REFRESH_TOKEN_EXPIRE_TIME=${REFRESH_TOKEN_EXPIRE_TIME:-86400}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - STORAGE_PREFIX=${STORAGE_PREFIX:-teamtime}
      - ENABLE_ANALYTICS=${ENABLE_ANALYTICS:-true}
      - ENABLE_REAL_TIME=${ENABLE_REAL_TIME:-true}
      - ENABLE_FILE_UPLOAD=${ENABLE_FILE_UPLOAD:-true}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
      - UPLOAD_SERVICE_URL=${UPLOAD_SERVICE_URL}
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL}
      - ANALYTICS_SERVICE_URL=${ANALYTICS_SERVICE_URL}
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    networks:
      - teamtime-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:16-alpine
    container_name: teamtime-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-teamtime}
      - POSTGRES_USER=${DB_USER:-teamtime}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - teamtime-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-teamtime}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  uploads:
  logs:
  postgres-data:

networks:
  teamtime-network:
    driver: bridge